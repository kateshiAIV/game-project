#include <SFML/Graphics.hpp>
//#include "viewcam.h"

using namespace sf;
float offsetX = 0, offsetY = 0;


const int H = 12;
const int W = 40;


String TileMap[H] = {

"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
"B                                     B",
"B                                     B",
"B                                     B",
"B                                     B",
"B                                     B",
"B                                     B",
"B                                     B",
"B                                     B",
"B                                     B",
"B                                     B",
"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",

};







class PLAYER {
private: float x, y = 0;
public:

	float dx, dy;
	FloatRect rect;
	bool onGround;
	Sprite sprite;
	float currentFrame;

	PLAYER(Texture& image)
	{
		sprite.setTexture(image);
		rect = FloatRect(7 * 32, 9 * 32, 32, 32);

		dx = dy = 0.1;
		currentFrame = 0;
	}


	void update(float time)
	{

		rect.left += dx * time;
		Collision(0);

		
		rect.top += dy * time;
		Collision(1);


		currentFrame += 0.005 * time;
		if (currentFrame > 9) currentFrame -= 9;

		if (dx > 0) sprite.setTextureRect(IntRect(32 * int(currentFrame), 64, 32, 32));
		if (dx < 0) sprite.setTextureRect(IntRect(32 * int(currentFrame) + 32, 64, -32, 32));
		if (dy > 0) {
			if (dx > 0) {
				sprite.setTextureRect(IntRect(32 * int(currentFrame), 64, 32, 32));
			}
			else {
				sprite.setTextureRect(IntRect(32 * int(currentFrame) + 32, 64, -32, 32));
			}
		}
		if (dy < 0) {
			if (dx > 0) {
				sprite.setTextureRect(IntRect(32 * int(currentFrame), 64, 32, 32));
			}
			else {
				sprite.setTextureRect(IntRect(32 * int(currentFrame) + 32, 64, -32, 32));
			}
		}

		sprite.setPosition(400, 200);

		dx = 0;
	}
	float getplayercoordinateX(){	//этим методом будем забирать координату Х	
		return dx;
	}
	float getplayercoordinateY(){	//этим методом будем забирать координату Y 	
		return dy;
	}

	

	void Collision(int dir)
	{
		for (int i = rect.top / 32; i < (rect.top + rect.height) / 32; i++)
			for (int j = rect.left / 32; j < (rect.left + rect.width) / 32; j++)
			{
				if (TileMap[i][j] == 'B')
				{
					if ((dx > 0) && (dir == 0)) rect.left = j * 32 - rect.width;
					if ((dx < 0) && (dir == 0)) rect.left = j * 32 + 32;
					if ((dy > 0) && (dir == 1)) { rect.top = i * 32 - rect.height;  dy = 0; }
					if ((dy < 0) && (dir == 1)) { rect.top = i * 32 + 32;   dy = 0; }
				}

				if (TileMap[i][j] == '0')
				{
					TileMap[i][j] = ' ';
				}

			}

	}
};

int main()
{

	RenderWindow window(VideoMode(600, 400), "Test!");
	Texture t;
	t.loadFromFile("rogue.png");
	Image map_image;//объект изображения для карты
	map_image.loadFromFile("bk.png");//загружаем файл для карты
	Texture map;//текстура карты
	map.loadFromImage(map_image);//заряжаем текстуру картинкой
	Sprite s_map;//создаём спрайт для карты
	s_map.setTexture(map);//заливаем текстуру спрайтом
	

	float currentFrame = 0;

	PLAYER p(t);
	Clock clock;

	RectangleShape rectangle(Vector2f(32, 32));

	while (window.isOpen())
	{	
		sf::View view;
		float time = clock.getElapsedTime().asMicroseconds();
		clock.restart();

		time = time / 700;

		if (time > 20) time = 20;

		Event event;
		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
				window.close();
		}

		if (Keyboard::isKeyPressed(Keyboard::Left))
		{
			p.dx = -0.1;

		}

		if (Keyboard::isKeyPressed(Keyboard::Right))
		{
			p.dx = 0.1;
		}

		if (Keyboard::isKeyPressed(Keyboard::Up))
		{
			p.dy = -0.1;
		}
		else {
			p.dy = 0;
		}
		if (Keyboard::isKeyPressed(Keyboard::Down))
		{
			p.dy = 0.1;
		}

		p.update(time);


		window.clear(Color::Blue);


		for (int i = 0; i < H; i++)
			for (int j = 0; j < W; j++)
			{
				if (TileMap[i][j] == 'B') s_map.setTextureRect(IntRect(0, 0, 32, 32));

				if (TileMap[i][j] == '0')  rectangle.setFillColor(Color::Green);

				if (TileMap[i][j] == ' ') {
					continue;
				};

				s_map.setPosition(j * 32, i * 32);
				window.draw(s_map); 
			}
		window.draw(p.sprite);
		window.display();
	}

	return 0;
}